中国儿童戏剧网站后台文档

一、首页
		请求方式:	GET
		请求url:	/

		请求参数:	无

		返回参数:
				contact:{ 
					number:xxxs,			联系方式
					people:xxx,			联系人
					postcode:xxx,		邮政编码
					address:xxx,			地址
					site:xxx			网址
				}
				posters:[
					{
					image:xxx,			海报
					}，
					....
				]
				columns:[
					{
					title:xxx 			题目
					},
					....
				]
				backstages:[
					{
					title:xxx 			题目
					},
					....
				]




一、用户模块
	1. 用户注册
		请求方式:	POST
		请求url：	/user/register
		
		请求参数:
				username	 	用户名		
				email			邮箱			邮箱格式
			 	password 		密码			长度为6-20的字母和数字组成的字符串
				re_passowrd		确认密码		长度为6-20的字母和数字组成的字符串

		返回参数：
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	2. 用户登录
	2.1 更换验证码
	 	请求方式:	GET
		请求url:	/user/captcha

		请求参数:	
				无

		返回参数:	验证码图片

	2.2 验证验证码
		请求方式:	POST
		请求url:	/user/check_captcha
		
		请求参数:	
				captcha

		返回参数:	
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}
	2.3 用户登录
		请求方式:	POST
		请求url:	/user/login

		请求参数:
				username	用户名	字符串
				password	密码		长度为6-20的字母和数字组成的字符串		  
				captcha		验证码	长度为5的字符串
		

		返回参数:	
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

二、在线报名模块
	1. 成绩查询
		请求方式:	POST
		请求url:	/user/score_inquiry

		请求参数:
				scorenumber		编号		string
				name			姓名		string

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				},
				application:[		报名表对象	正常返回时返回此对象
					  name:xxx,			名字
					  scorenumber:xxx,		编号
					  score:xxx			分数
					  score_details		分数详情
				]

		备注:		登录可操作

	2. 在线报名
		请求方式:	POST
		请求url:	/user/ application

		请求参数:
				name			姓名		string(必填字段)
				gender		性别		boolean类型,0男,1女;2表示未知
				year			出生年	integer
				month			出生月	integer
				day			出生日	integer
				hometown		籍贯		string
				address		居住地址	string
				guardian		监护人	string
				phone			手机		string(必填字段)
				unit			单位		string
				position		职务 		string
				QQ			QQ		string
				school			所在学校	string
				postcode		邮编		string
				trainingunit		培训单位	string
				profession		行当		string
				timeoflearn		学戏时间	string
				details			详细说明	text

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			考生编号
				}
		
		备注:登录可操作

三、个人中心模块
	1.空间首页
		请求方式:	GET
		请求url:	/user/space_home/:user_id

		请求参数:	
				user_id		被访问用户id		根据id去到首页

		返回参数:	视图
				realname		真实姓名
				city			所在城市
				gender		性别
				per_description	我的简介

				albums:[		相册的数组
					{
					title,					相册名称
					pictureCount,				相册图片数
					picture					相册封面图片
					},
					....
				]
				topics:[		话题数组
					{
					title,					话题名称
					created_at,				话题创建时间
					content,				话题内容
					topicCommentCount			话题评论数
					},
					....
				]			


	2.话题动态
		请求方式:	GET
		请求url:	/user/topic/:user_id

		请求参数:	
				user_id	被访问用户id			根据id获取话题动态

		返回参数:	视图
				topics:[
					{
						title:xxx,			话题题目
						content:xxx,			话题内容
						created_at:xxx,		话题建立时间
						commentsCount:xxx		话题评论数
					},
					....
				]


	3.相册
		请求方式:	GET
		请求url:	/user/album/:user_id

		请求参数:	
				user_id	被访问用户id			根据id获取相册

		返回参数:	视图
				albums:[
					{
						title:xxx,			相册题目
						picture:xxx,			相册封面
						albumCount:xxx		相册图片数目
						},
						....
				]

	4.照片
		请求方式:	GET
		请求url:	/user/picture/

		请求参数:	
				album_id	相册的id			根据id取得图片实例

		返回参数:	

				{
				
					pictures:{
						title:xxx 		照片标题
						picture:xxx 		照片url
					}
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}


	5. 获取留言
		请求方式:	GET
		请求url:	/user/message/:user_id

		请求参数:	
				user_id	被访问用户id			根据用户id获取留言

		返回参数:	视图
				messages:[
					 {
						username:xxx,			留言人姓名
						created_at:xxx,			留言时间
						content:xxx,				留言内容
						messageCommentCount:xxx	留言的回复数
					},
					....
				]

	6.获取留言的回复
		请求方式:	GET
		请求url:	/user/message_comment/:message_id

		请求参数:	
				message_id						留言的id

		返回参数:	
				message_comments:[
					{
						avatar:xxx,				回复者头像
						username:xxx,			回复者姓名
						content:xxx,				回复内容
						created_at:xxx			回复时间
					},
					....
				]

	7.获取个人资料
		请求方式:	GET
		请求url:	/user/update/:user_id

		请求参数:	
				user_id

		返回参数:	视图
				user:{	
						avatar:xxx,			头像
						realname:xxx,		真实姓名
						gender:xxx,			性别
						position:xxx,			职位
						city:xxx,			所在城市
						interests:xxx,			兴趣
						per_description:xxx		我的简介
				}
	8.发表留言
		请求方式:	POST
		请求url:	/user/personal/message

		请求参数:	
				receiver_id					被留言者id
				content						留言内容

		返回参数:	
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				},
				msg:{
						avatar:xxx,			头像
						username:xxx,		留言者姓名
						content:xxx,			内容
						created_at			留言时间
				}
		备注:登录可操作

	9.发表回复
		请求方式:	POST
		请求url:	/user/personal/message_comment

		请求参数:	
				message_id					被回复的留言的id
				comment_content				回复内容

		返回参数:	
			{
				errCode:xxx,			错误码	0表示返回正常	 
				comment:{
						avatar:xxx,			头像
						username:xxx,		回复者姓名
						content:xxx,			内容
						created_at			回复时间
				}
			}
		备注:登录可操作

	10.更新个人资料
		请求方式:	POST
		请求url:	/user/personal/update

		请求参数:	
				realname:xxx,		真实姓名
				gender:xxx,			性别
				position:xxx,			职位
				city:xxx,			所在城市
				interests:xxx,			兴趣
				per_description:xxx		我的简介

		返回参数:
			{
				errCode:xxx,			错误码	0表示返回正常	 
				message:xxx			提示信息
			}
		备注:登录可操作

	11.更换头像
		请求方式:	POST
		请求url:	/user/personal/chang_image

		请求参数:
				avatar				头像图片

		返回参数:
			{
				errCode:xxx,			错误码	0表示返回正常	 
				message:xxx			提示信息
			}
		备注:登录可操作


四.论谈模块
	1.首页协会资讯更多
		请求方式:	GET
		请求url:	customer/news

		请求参数:	无

		返回参数:	
				page:xxx			页数
				column_count:xxx		新闻条数
				columns:[
					{
					title:xxx,		文章题目
					created_at		发表时间
					},
					....
				]

	2.话题论谈
		请求方式:	GET
		请求url:	customer/news/one_topic

		请求参数:	无

		返回参数:
				topic:{
					avatar:xxx,			话题人头像
					name:xxx,			话题人名字
					title:xxx,			话题标题
					content:xxx,			话题内容
					commentCount:xxx		话题评论数
				}
				topic_comments:[
						{
						name:xxx,		话题评论人名字
						created_at:xxx,	创建时间
						content:xxx		话题评论内容
						},
						....
				]

	3.更多话题评论
		请求方式:	GET
		请求url:	customer/news/topic_comment

		请求参数:	
				topic_id				话题id

		返回参数:	
				comments:[
					{
					name:xxx,			话题评论人名字
					created_at:xxx,		创建时间
					content:xxx			话题评论内容
					},
					....
				]

				<---登录可操作--->
	4.发表话题
		请求方式:	POST
		请求url:	user/personal/issue_topic

		请求参数:
				title:xxx  				话题标题
				content:xxx 				话题内容

		返回参数:	
				{
				errCode:xxx,			错误码	0表示返回正常	 
				message:xxx			提示信息
				}

	4.1 发表话题评论
		请求方式:	POST
		请求url:	/user/personal/topic_comment

		请求参数:	
				topic_id:xxx 			话题的id
				content:xxx 			话题内容

		返回参数:
				{
				errCode:xxx,			错误码	0表示返回正常	 
				message:xxx				提示信息
				}

	4.2 发表话题评论的回复
		请求方式:	POST
		请求url:	/user/personal/reply

		请求参数:	
				topicComment_id:xxx 	评论的id
				content:xxx 			话题内容

		返回参数:
				{
				errCode:xxx,			错误码	0表示返回正常	 
				message:xxx				提示信息
				}


	5.启蒙专栏
		请求方式:	GET
		请求url:	customer/news/column

		请求参数:	无

		返回参数：
				page:xxx			页数
				column_count:xxx		新闻条数
				columns:[
					{
					title:xxx,		文章题目
					created_at		发表时间
					},
					....
				]

	6.启蒙专栏详细信息
		请求方式:	GET
		请求url:	customer/news/column_more

		请求参数:	
				column_id			专栏文章id

		返回参数：
				column:{
					title:xxx,		题目
					created_at:xxx,	发表时间
					content:xxx		内容
				}

	7.学会动态
		请求方式:	GET
		请求url:	customer/news/society

		请求参数:	无

		返回参数:	
				page:xxx			页数
				society_count:xxx		新闻条数
				societies:[
					{
					title:xxx,		文章题目
					created_at		发表时间
					},
					....
				]


	8.学会动态详细信息
		请求方式:	GET
		请求url:	customer/news/society_more

		请求参数:	
				society_id			学会文章id

		返回参数:
				society:{
					title:xxx,		题目
					created_at:xxx,	发表时间
					content:xxx		内容
				}

	9.协会动态
		请求方式:	GET
		请求url:	customer/news/association

		请求参数:	无

		返回参数:	
				page:xxx			页数
				association_count:xxx	新闻条数
				associations:[
					{
					title:xxx,		文章题目
					created_at		发表时间
					},
					....
				]


	10.协会动态详细信息
		请求方式:	GET
		请求url:	customer/news/association_more

		请求参数:
				association_id		协会文章id

		返回参数:
				association:{
					title:xxx,		题目
					created_at:xxx,	发表时间
					content:xxx		内容
				}

五. 教师认证模块
	1.教师认证首页/身份表示分类
		请求方式:	GET
		请求url:	authentication/identity

		请求参数:	identity			
		备注:		根据此参数,获取不同身份的老师信息，null时返回全部

		返回参数:
				bureaus:[			主席团
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]
				consultants:[			顾问
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]
				directors:[			理事
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]
				dance_associattions:[	舞协会员
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]
				website_members:[		网站会员
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]

	2.按地区分类
		请求方式:	GET
		请求url:	authentication/city

		请求参数:	area				地区
		备注:		根据此参数,获取不同地区的老师信息，null时返回全部

		返回参数:	
				area:[
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]

	3.按用户名分类(首字母)
		请求方式:	GET
		请求方式:	authentication/username

		请求参数:	letter				首字母
		备注:		根据此参数,获取不同用户名的首字母，
				以此返回老师信息，null时返回全部

		返回参数:
				letters:[
					{
					avatar:xxx,		教师头像
					realname:xxx		真实姓名
					},
					....
				]

	4.点击老师照片进入个人中心
		与个人空间模块——空间首页相同

六.协会表演模块
	1.首页协会表演更多/戏剧百家
		请求方式:	GET
		请求url:	performance/teacher

		请求参数:	无

		返回参数:	
				page:xxx				页数
				teachers:[
					{
					avatar:xxx,			照片
					position:xxx,			职业
					chinese_name:xxx		中文名
					},
					....
				]

	2.戏剧百家详细信息
		请求方式:	GET
		请求url:	performance/teacher_more

		请求参数:	teacher_id

		返回参数:
				teacher:{
					avatar:xxx			照片
					chinese_name:xxx		中文名
					foreign_name:xxx		外文名
					country:xxx			国籍
					nation:xxx			民族
					birthplace:xxx			出生地
					position:xxx			职业
					social_post:xxx		社会公职
					production:xxx		代表作品
					per_description:xxx		简介
				}

	3.台前幕后
		请求方式:	GET
		请求url:	performance/backstage

		请求参数:	无

		返回参数:
				page:xxx
				backstage_count:xxx
				backstages:[
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					}
				]

	4.台前幕后详细信息
		请求方式:	GET
		请求url:	performance/backstage_more

		请求参数:	backstage_id

		返回参数:
				backstage:{
					title:xxx,			题目
					content:xxx,			内容
					created_at:xxx		发表时间
				}

	5.经典欣赏
		请求方式:	GET
		请求url:	performance/appreciation

		请求参数:	无

		返回参数:
				page:xxx				页数
				appreciations:[
						{
						title:xxx，		视频标题
						video:xxx,		视频截图
						},
						....
				]

	6.经典欣赏视频播放
		请求方式:	GET
		请求url:	performance/appreciation_more

		请求参数:	
				video_id

		返回参数:	
				vedio:xxx,				视频播放


后台管理员可操作界面

七、 后台首页模块
	1.1后台首页
		请求方式:	GET
		请求url:	admin/home
				

		请求参数:	无
			
		返回参数:
				images:[
					{
					image:xxx			图片
					},
					....
				]
	1.2轮播海报静态页面与1.1一样

	2.添加轮播海报
		请求方式:	POST
		请求url:	admin/home/add_poster

		请求参数:	
				image:xxx				图片

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}	

	3.编辑轮播海报
		请求方式:	POST
		请求url:	admin/home/edit_poster

		请求参数:	
				image_id				图片id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	4.删除轮播海报	
		请求方式:	POST
		请求url:	admin/home/delete_poster

		请求参数:	
				image_id				图片id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	5.联系我们静态页面
		请求方式:	GET
		请求url:	admin/home/contact_us

		请求参数:	无

		返回参数:
				contact:{
					number:xxxs,			联系方式
					people:xxx,			联系人
					postcode:xxx,		邮政编码
					address:xxx,			地址
					site:xxx			网址
				}

	6.编辑联系我们
		请求方式:	POST
		请求url:	admin/home/contact_us

		请求参数:	
					number:xxxs,			联系方式
					people:xxx,			联系人
					postcode:xxx,		邮政编码
					address:xxx,			地址
					site:xxx			网址

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	7.友情链接静态页面
		请求方式:	GET
		请求url:	admin/home/link

		请求参数:	无

		返回参数:
				links:[
					{
					image:xxx,			网站logo
					site:xxx			网址
					},
					....
				]

	8.添加友情链接
		请求方式:	POST
		请求url:	admin/home/add_link

		请求参数:
					image:xxx,			网站logo
					site:xxx			网址

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	9.编辑友情链接
		请求方式:	POST
		请求url:	admin/home/edit_link

		请求参数:
				link_id					链接id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	10.删除友情链接
		请求方式:	POST
		请求url:	admin/home/delete_link

		请求参数:
				link_id					链接id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

八、后台谈论模块
	1.启蒙专栏静态页面
		请求方式:	GET
		请求url:	admin/topic/column

		请求参数:	无

		返回参数:
				columns:{
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					},
					....
				}

	2.添加启蒙专栏
		请求方式:	POST
		请求url:	admin/topic/add_column

		请求参数:
					title:xxx,			文章题目
					content:xxx			文章内容

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	3.编辑启蒙专栏
		请求方式:	POST
		请求url:	admin/topic/edit_column

		请求参数:	
				column_id				文章id

		返回参数
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}


	4.删除启蒙专栏
		请求方式:	POST
		请求url:	admin/topic/delete_column

		请求参数:	
				column_id				文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	5.学会动态静态页面
		请求方式:	GET
		请求url:	admin/topic/society

		请求参数:	无

		返回参数:
				societies:{
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					},
					....
				}

	6.添加学会动态
		请求方式:	POST
		请求url:	admin/topic/add_society

		请求参数:
					title:xxx,			文章题目
					content:xxx			文章内容

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	7.编辑学会动态
		请求方式:	POST
		请求url:	admin/topic/edit_society

		请求参数:	
				society_id				文章id

		返回参数
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	8.删除学会动态
		请求方式:	POST
		请求url:	admin/topic/delete_society

		请求参数:	
				society_id				文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	9.协会动态静态页面
		请求方式:	GET
		请求url:	admin/topic/association

		请求参数:	无

		返回参数:
				associations:{
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					},
					....
				}

	10.添加协会动态
		请求方式:	POST
		请求url:	admin/topic/add_association

		请求参数:
					title:xxx,			文章题目
					content:xxx			文章内容

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}
	
	11.编辑协会动态
		请求方式:	POST
		请求url:	admin/topic/edit_association

		请求参数:	
				association_id			文章id

		返回参数
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	12.删除协会动态
		请求方式:	POST
		请求url:	admin/topic/delete_association

		请求参数:	
				association_id			文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

九、招贤纳士
	1.招贤纳士静态页面
		请求方式:	GET
		请求url:	admin/employ

		请求参数:	无

		返回参数:	
				employments:[
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					},
					....
				]

	2.添加招贤纳士
		请求方式:	POST
		请求url:	admin/employ/add_employment

		请求参数:	
					title:xxx,			文章题目
					content:xxx			文章内容		

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	3.编辑招贤纳士
		请求方式:	POST
		请求url:	admin/employ/edit_employment

		请求参数:	
				employment_id			文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	4.删除招贤纳士
		请求方式:	POST
		请求url:	admin/employ/delete_employment

		请求参数:	
				employment_id			文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

十、协会表演
	1.戏剧百家静态页面
		请求方式:	GET
		请求url:	admin/show/teacher

		请求参数:	无

		返回参数:
				teachers:{
					{
					image:xxx,			头像图片
					realname:xxx,		真实姓名
					username:xxx,		用户名	
					password:xxx			密码
					},
					....
				}

	2.添加戏剧百家
		请求方式:	POST
		请求url:	admin/show/add_teacher

		请求参数:
					image:xxx,			头像图片
					realname:xxx,		真实姓名
					username:xxx,		用户名	
					password:xxx			密码

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	3.编辑戏剧百家
		请求方式:	POST
		请求url:	admin/show/edit_teacher

		请求参数:	
				teacher_id				戏剧家id

		返回参数
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}


	4.删除戏剧百家
		请求方式:	POST
		请求url:	admin/show/delete_teacher

		请求参数:	
				teacher_id				戏剧家id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	5.台前幕后静态页面
		请求方式:	GET
		请求url:	admin/show/backstage

		请求参数:	无

		返回参数:
				backstages:{
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					},
					....
				}

	6.添加台前幕后
		请求方式:	POST
		请求url:	admin/show/add_backstage

		请求参数:
					title:xxx,			文章题目
					content:xxx			文章内容

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	7.编辑台前幕后
		请求方式:	POST
		请求url:	admin/show/edit_backstage

		请求参数:	
				backstage_id				文章id

		返回参数
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	8.删除台前幕后
		请求方式:	POST
		请求url:	admin/show/delete_backstage

		请求参数:	
				backstage_id				文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	9.经典欣赏静态页面
		请求方式:	GET
		请求url:	admin/show/appreciation

		请求参数:	无

		返回参数:
				appreciations:{
					{
					title:xxx,			文章题目
					created_at:xxx		发表时间
					},
					....
				}

	10.添加经典欣赏
		请求方式:	POST
		请求url:	admin/show/add_appreciation

		请求参数:
					title:xxx,			文章题目
					video:xxx			文章内容

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}
	
	11.编辑经典欣赏
		请求方式:	POST
		请求url:	admin/show/edit_appreciation

		请求参数:	
				appreciation_id			文章id

		返回参数
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	12.删除经典欣赏
		请求方式:	POST
		请求url:	admin/show/delete_appreciation

		请求参数:	
				appreciation_id			文章id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

十一、成绩查询
	1.成绩查询静态页面
		请求方式:	GET
		请求url:	admin/score

		请求参数:	无

		返回参数:
				scores:{
					{
					name:xxx,			姓名
					scorenumber:xxx,		编号
					score:xxx,			分数
					score_details			分数详情	
					},
					....
				}

	2.添加成绩查询
		请求方式:	POST
		请求url:	admin/score/score

		请求参数:
					name:xxx,			姓名
					scorenumber:xxx,		编号
					score:xxx,			分数	
					score_details:xxx		成绩详情

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	3.编辑成绩查询
		与添加成绩查询一样


	4.删除成绩查询
		请求方式:	POST
		请求url:	admin/score/delete_score

		请求参数:	
				score_id				分数id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}
十二、认证
	1.认证静态页面
		请求方式:	GET
		请求url:	admin/authentication

		请求参数:	无

		返回参数:	
				authentications:[
						{
						avatar:xxx,		头像
						realname:xxx		真实姓名
						},
						....
				]

	2.添加认证老师
		请求方式:	POST
		请求url:	admin/authentication/add_authentication

		请求参数:	
				avatar:xxx,				头像
				username:xxx,			用户名
				email:xxx,				邮箱
				password:xxx				密码

		返回参数:

				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	3.编辑认证老师:
		请求方式:	POST
		请求url:	admin/authentication/edit_authentication

		请求参数:	
				auth_id				认证老师的id
				avatar:xxx,				头像
				username:xxx,			用户名
				email:xxx,				邮箱
				password:xxx				密码

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

补充：
	1.修改个人资料判断
		请求方式:	GET
		请求url:	/user/personal/is_own

		请求参数:	user_id					个人中心的id

		返回参数:
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	2. 经典欣赏静态页面
		请求方式:	GET
		请求url:	customer/performance/appreciation

		请求参数:	无

		返回参数: 
				page:xxx 		总页数
				appreciations:[	
					{
					id:xxx 			视频id
					title:xxx 		视频标题
					video_img:xxx 		视频截图
					},...
				]
		视频连接例子:
				<iframe height=498 width=510 src="http://player.youku.com/embed/XMTI4NjQ4Njg0MA==" frameborder=0 allowfullscreen></iframe>

				<embed src="http://player.youku.com/player.php/sid/XMTI4NjQ4Njg0MA==/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed>

				http://player.youku.com/player.php/sid/XMTI4NjQ4Njg0MA==/v.swf

	3. 视频播放:
		请求方式:	GET
		请求url:	customer/performance/appreciation_more

		请求参数:	video_id			视频id

		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
					video:xxx 			视频连接
				}

	4. 论谈评论
		请求方式:	POST
		请求url:	user/topic_comment

		请求参数:	
				topic_id 				话题id
				content:xxx 				评论内容

		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	5.论谈评论的回复
		请求方式:	POST
		请求url:	user/reply

		请求参数:	
				reply_id				被回复id
				content:xxx 				回复内容

		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	6.新建相册
		请求方式:	POST
		请求方式:	/user/personal/add_album

		请求参数
				album_name					照片链接

		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	7.删除相册
		请求方式:	POST
		请求方式:	/user/personal/delete_album

		请求参数
				album_id				相册id

		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	8.浏览图片
		请求方式:	POST
		请求方式:	/user/personal/scan_img

		请求参数
				album_id				相册id


		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
					pictures:[
						{
						picture:xxx 		图片链接
						},...
					]
				}

	9. 上传图片
		请求方式:	POST
		请求方式:	/user/personal/upload_image

		请求参数
				img_url	s				照片链接
				album_id				相册id


		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

	10.删除照片
		请求方式:	POST
		请求方式:	/user/personal/delete_image

		请求参数
				photo_id					照片id

		返回参数: 
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx			提示信息
				}

